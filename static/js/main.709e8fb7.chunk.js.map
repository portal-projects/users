{"version":3,"sources":["visualizations/BubbleChart.js","visualizations/CirclePackingChart.js","App.js","serviceWorker.js","index.js"],"names":["BubbleChart","state","circles","width","window","innerWidth","height","updateDimensions","setState","mouseClick","e","console","log","target","id","data","mouseEnter","mouseLeave","addEventListener","this","removeEventListener","map","circle","i","key","transform","x","y","href","pic","r","size","fillOpacity","fill","onClick","onMouseEnter","onMouseLeave","text","nextProps","prevState","length","nodes","d3","children","sum","d","sort","a","b","value","pack","fn","textAnchor","fontSize","username","Component","CirclePackingChart","pictures","currentTag","attributes","tag","opacity","pics","descendants","slice","name","parent","Object","values","App","users","tags","setUserSizeByLastSeen","now","user","lastSeen","Date","bumped","diffTime","Math","abs","diffHours","ceil","parseResult","result","usersByLastSeen","usersByTags","Tag","forEach","avatar","push","location","split","client","ApolloClient","link","ApolloLink","from","onError","graphQLErrors","networkError","message","locations","path","HttpLink","uri","cache","InMemoryCache","QUERY","gql","query","fetchPolicy","then","$","get","response","className","style","display","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.709e8fb7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { pack } from 'd3';\n\nclass BubbleChart extends Component {\n    state = {\n        circles: [],\n        width: window.innerWidth / 2,\n        height: window.innerWidth / 2\n    };\n    updateDimensions = () => {\n        this.setState({ width: window.innerWidth / 2, height: window.innerWidth / 2 });\n    };\n\n    componentDidMount() {\n        window.addEventListener('resize', this.updateDimensions);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (!nextProps.data || typeof nextProps.data.length === 'undefined') return null; // data hasn't been loaded yet so do nothing\n\n        const data = nextProps.data;\n        const nodes = (d3.hierarchy({ children: data })\n            .sum(d => d.size)\n            .sort((a, b) => b.value - a.value));\n        const fn = pack(nodes).size([prevState.width, prevState.height]);\n        const circles = fn(nodes).children.map((circle) => {\n            let fill = '#17becf';\n            let text = <text textAnchor=\"middle\"><tspan y=\"0.3em\" fontSize=\"10px\">{circle.data.username[0]}</tspan></text>;\n            if (circle.data.pic) {\n                fill = `url(#${circle.data.id})`;\n                text = '';\n            }\n            return {\n                id: circle.data.id,\n                x: circle.x,\n                y: circle.y,\n                r: circle.r,\n                fill: fill,\n                pic: circle.data.pic,\n                text,\n                data: circle.data\n            };\n        });\n\n        return { circles };\n    }\n\n    componentDidUpdate() {\n    }\n\n    mouseClick = (e) => {\n        console.log('click', this.state.circles[e.target.id].data);\n    }\n    mouseEnter = (e) => {\n        console.log('hover', this.state.circles[e.target.id].data);\n    }\n\n    mouseLeave = (e) => {\n    }\n\n    render() {\n\n        return (\n            <svg width={this.state.width} height={this.state.height}>\n                {this.state.circles.map((circle, i) =>\n                    (\n                        <g key={i} transform={`translate(${circle.x}, ${circle.y})`}>\n                            <defs>\n                                <pattern id={circle.id} x=\"0\" y=\"0\" width=\"1\" height=\"1\">\n                                    <image href={circle.pic} x=\"0\" y=\"0\" width={circle.r * 2} height={circle.r * 2}></image>\n                                </pattern>\n                            </defs>\n                            <circle size={circle.size} id={i} r={circle.r} fillOpacity={0.7} fill={circle.fill} onClick={this.mouseClick} onMouseEnter={this.mouseEnter} onMouseLeave={this.mouseLeave}></circle>\n                            {circle.text}\n                        </g>\n                    )\n                )}\n            </svg>\n        );\n    }\n}\n\nexport default BubbleChart;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { pack } from 'd3';\n\nclass CirclePackingChart extends Component {\n    state = {\n        circles: [],\n        pictures: [],\n        width: window.innerWidth / 2,\n        height: window.innerWidth / 2\n    };\n    updateDimensions = () => {\n        this.setState({ width: window.innerWidth / 2, height: window.innerWidth / 2 });\n    };\n\n    componentDidMount() {\n        window.addEventListener('resize', this.updateDimensions);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (!nextProps.data || typeof nextProps.data.length === 'undefined') return null; // data hasn't been loaded yet so do nothing\n\n        const data = nextProps.data;\n        const nodes = (d3.hierarchy({ children: data })\n            .sum(d => d.size)\n            .sort((a, b) => b.value - a.value));\n        const fn = pack(nodes).size([prevState.width, prevState.height]);\n        const pics = {};\n        const circles = fn(nodes).descendants().slice(1).map((circle) => {\n            let fill = '#17becf';\n            let opacity = '0.7';\n            let text = '';\n            let tag = '';\n            if (circle.data.children) {\n                fill = '#000000';\n                opacity = '0.1';\n                tag = circle.data.name;\n                // text = <text textAnchor=\"middle\"><tspan y=\"0.3em\" fontSize=\"10px\">{circle.data.name}</tspan></text>;\n            } else {\n                tag = circle.parent.data.name;\n                text = <text textAnchor=\"middle\"><tspan y=\"0.3em\" fontSize=\"10px\">{circle.data.username[0]}</tspan></text>;\n            }\n            \n            if (circle.data.pic) {\n                fill = `url(#circle_pack_${circle.data.id})`;\n                pics[circle.data.id] = {\n                    pic: circle.data.pic,\n                    r: circle.r,\n                    id: `circle_pack_${circle.data.id}`\n                };\n                text = '';\n            }\n            return {\n                id: circle.data.id,\n                x: circle.x,\n                y: circle.y,\n                r: circle.r,\n                opacity: opacity,\n                fill: fill,\n                pic: circle.data.pic,\n                text,\n                data: circle.data,\n                tag: tag\n            };\n        });\n\n        return { circles, pictures: Object.values(pics) };\n    }\n\n    componentDidUpdate() {\n    }\n\n    mouseClick = (e) => {\n        // console.log('click', this.state.circles[e.target.id].data);\n    }\n    mouseEnter = (e) => {\n        const currentTag = this.state.currentTag;\n        // console.log(currentTag, e.target.attributes.tag);\n        if (e.target.attributes.tag !== currentTag) {\n            console.log('tag:', e.target.attributes.tag);\n            this.setState({currentTag: e.target.attributes.tag});\n        }\n    }\n\n    mouseLeave = (e) => {\n    }\n\n    render() {\n        return (\n            <svg width={this.state.width} height={this.state.height}>\n                {this.state.pictures.map((pic, i) => \n                    <defs key={`circle_packing_defs_${i}`}>\n                        <pattern id={pic.id} x=\"0\" y=\"0\" width=\"1\" height=\"1\">\n                            <image href={pic.pic} x=\"0\" y=\"0\" width={pic.r * 2} height={pic.r * 2}></image>\n                        </pattern>\n                    </defs>\n                )}\n                {this.state.circles.map((circle, i) =>\n                    (\n                        <g key={`circle_packing_${i}`} transform={`translate(${circle.x}, ${circle.y})`}>\n                            <circle tag={circle.tag} size={circle.size} id={i} r={circle.r} fillOpacity={circle.opacity} fill={circle.fill} onClick={this.mouseClick} onMouseEnter={this.mouseEnter} onMouseLeave={this.mouseLeave}></circle>\n                            {circle.text}\n                        </g>\n                    )\n                )}\n            </svg>\n        );\n    }\n}\n\nexport default CirclePackingChart;\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\nimport gql from \"graphql-tag\";\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport BubbleChart from './visualizations/BubbleChart';\nimport CirclePackingChart from \"./visualizations/CirclePackingChart\";\nimport $ from 'jquery';\n\nclass App extends Component {\n\n  state = {\n    users: {},\n    tags: {}\n  };\n\n  setUserSizeByLastSeen = (now, user) => {\n    const lastSeen = new Date(user.bumped * 1000);\n    const diffTime = Math.abs(now - lastSeen);\n    const diffHours = Math.ceil(diffTime / (1000 * 60 * 60));\n    // const diffDays = Math.ceil(diffHours / 24);\n    // const diffWeeks = Math.ceil(diffDays / 7);\n    // user.size = diffHours > (30 * 24) ? 4 : (30 * 24) - diffHours; // 30 days\n    // user.size = diffHours > (10 * 24) ? 4 : (10 * 24) - diffHours; // 10 days\n    user.size = diffHours > (5 * 24) ? 4 : (5 * 24) - diffHours; // 5 days\n    return user;\n  }\n\n  parseResult = (result) => {\n    const usersByLastSeen = {};\n    const usersByTags = [];\n    const now = new Date();\n    result.data.Tag.forEach((tag) => {\n      if (tag.children.length < 6) {\n        return;\n      }\n      tag.children.forEach((user) => {\n        user.pic = user.avatar === 'null' ? null : `https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png`;\n        user = this.setUserSizeByLastSeen(now, user);\n        usersByLastSeen[user.id] = user;\n      });\n      if (tag.children.length > 1) {\n        usersByTags.push(tag);\n      }\n    });\n    this.setState({ users: Object.values(usersByLastSeen), tags: usersByTags });\n  }\n\n  componentDidMount() {\n    if (window.location.href.split('localhost:').length === 2) {\n      $.get('tags.json').then((response) => {\n        console.log('static data', response);\n        this.parseResult(response);\n      });\n      return;\n    }\n    const client = new ApolloClient({\n      link: ApolloLink.from([\n        onError(({ graphQLErrors, networkError }) => {\n          if (graphQLErrors)\n            graphQLErrors.forEach(({ message, locations, path }) =>\n              console.log(\n                `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n              ),\n            );\n          if (networkError) {\n            console.log('net error', networkError);\n          }\n        }),\n        new HttpLink({\n          uri: 'http://localhost:3000/graphql'\n        })\n      ]),\n      cache: new InMemoryCache()\n    });\n    const QUERY = gql`\n    {\n        Tag {\n            name\n            children: people {\n                id\n                username\n                avatar\n            }\n        }\n    }\n`;\n    \n    client.query({ query: QUERY, fetchPolicy: \"no-cache\" }).then((result) => {\n      this.parseResult(result);\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"UsersByLastSeen\">\n        <div style={{display: 'flex'}}>\n          <BubbleChart data={this.state.users} />\n          <CirclePackingChart data={this.state.tags} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}